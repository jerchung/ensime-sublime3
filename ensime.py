import sublime, sublime_plugin
import os.path
import subprocess
from functools import partial
import time
import socket

from . import session

class EnsimeStartup(sublime_plugin.WindowCommand):
    def is_enabled(self):
        return session.for_window(self.window) == None

    def run(self):
        project_settings = self.window.project_data()

        if not 'ensime_project_folder' in project_settings:
            sublime.error_message('Project setting "ensime_project_folder" required')
            return

        root = project_settings.get('ensime_project_folder')
        dot_ensime = os.path.join(root, '.ensime')

        if not os.path.isfile(dot_ensime):
            sublime.error_message('.ensime file not found in project - Consider '
                'using sbt gen-ensime to generate file')
            return

        port_file = os.path.join(root, '.ensime_cache', 'port')

        print("PORT FILE " + port_file)
        sublime.set_timeout_async(partial(
            self.launch_and_connect,
            dot_ensime=dot_ensime,
            port_file=port_file,
            interval=2,
            timeout=30
        ), 0)

    # Launch an ensime server if there is no process running on the current
    # repo and connect to it
    def launch_and_connect(self, dot_ensime, port_file, interval, timeout):
        print("STARTING CONNECT")
        start_script = os.path.join(os.path.dirname(__file__), 'serverStart.sh')
        if not os.path.isfile(port_file):
            print("NO PORT FILE")
            subprocess.call(['sh', start_script, dot_ensime])

        # Poll until port file is generated by ensime server (if it's not there already)
        elapsed = 0
        while not os.path.isfile(port_file) and elapsed < timeout:
            print('POLL ' + str(elapsed))
            elapsed += interval
            time.sleep(interval)

        if not os.path.isfile(port_file):
            sublime.error_message('Timed out at {0} seconds with '.format(timeout) +
                'no ensime port file created')
            return

        with open(port_file, 'r') as f:
            port = int(f.readlines()[0].strip())
            print("Got port {0}, connecting now".format(port))
            ensime_session = session.EnsimeSession(port)
            session.set_session(self.window, ensime_session)
